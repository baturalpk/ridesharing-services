# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import base_pb2 as base__pb2


class TripServiceStub(object):
    """--- Trip service ---

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestTrip = channel.unary_unary(
                '/ridesharing.TripService/RequestTrip',
                request_serializer=base__pb2.RequestTripRequest.SerializeToString,
                response_deserializer=base__pb2.RequestTripResponse.FromString,
                )
        self.CancelTrip = channel.unary_unary(
                '/ridesharing.TripService/CancelTrip',
                request_serializer=base__pb2.CancelTripRequest.SerializeToString,
                response_deserializer=base__pb2.Empty.FromString,
                )
        self.SeekForTripAsDriver = channel.stream_stream(
                '/ridesharing.TripService/SeekForTripAsDriver',
                request_serializer=base__pb2.SeekForTripAsDriverRequest.SerializeToString,
                response_deserializer=base__pb2.SeekForTripAsDriverResponse.FromString,
                )


class TripServiceServicer(object):
    """--- Trip service ---

    """

    def RequestTrip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTrip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SeekForTripAsDriver(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TripServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestTrip': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestTrip,
                    request_deserializer=base__pb2.RequestTripRequest.FromString,
                    response_serializer=base__pb2.RequestTripResponse.SerializeToString,
            ),
            'CancelTrip': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTrip,
                    request_deserializer=base__pb2.CancelTripRequest.FromString,
                    response_serializer=base__pb2.Empty.SerializeToString,
            ),
            'SeekForTripAsDriver': grpc.stream_stream_rpc_method_handler(
                    servicer.SeekForTripAsDriver,
                    request_deserializer=base__pb2.SeekForTripAsDriverRequest.FromString,
                    response_serializer=base__pb2.SeekForTripAsDriverResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ridesharing.TripService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TripService(object):
    """--- Trip service ---

    """

    @staticmethod
    def RequestTrip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ridesharing.TripService/RequestTrip',
            base__pb2.RequestTripRequest.SerializeToString,
            base__pb2.RequestTripResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelTrip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ridesharing.TripService/CancelTrip',
            base__pb2.CancelTripRequest.SerializeToString,
            base__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SeekForTripAsDriver(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/ridesharing.TripService/SeekForTripAsDriver',
            base__pb2.SeekForTripAsDriverRequest.SerializeToString,
            base__pb2.SeekForTripAsDriverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MappingServiceStub(object):
    """--- Mapping service ---

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateDistance = channel.unary_unary(
                '/ridesharing.MappingService/CalculateDistance',
                request_serializer=base__pb2.CalculateDistanceRequest.SerializeToString,
                response_deserializer=base__pb2.CalculateDistanceResponse.FromString,
                )
        self.MakeTimeEstimation = channel.unary_unary(
                '/ridesharing.MappingService/MakeTimeEstimation',
                request_serializer=base__pb2.MakeTimeEstimationRequest.SerializeToString,
                response_deserializer=base__pb2.MakeTimeEstimationResponse.FromString,
                )
        self.DoGeocoding = channel.unary_unary(
                '/ridesharing.MappingService/DoGeocoding',
                request_serializer=base__pb2.DoGeocodingRequest.SerializeToString,
                response_deserializer=base__pb2.DoGeocodingResponse.FromString,
                )


class MappingServiceServicer(object):
    """--- Mapping service ---

    """

    def CalculateDistance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakeTimeEstimation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoGeocoding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MappingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateDistance': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateDistance,
                    request_deserializer=base__pb2.CalculateDistanceRequest.FromString,
                    response_serializer=base__pb2.CalculateDistanceResponse.SerializeToString,
            ),
            'MakeTimeEstimation': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeTimeEstimation,
                    request_deserializer=base__pb2.MakeTimeEstimationRequest.FromString,
                    response_serializer=base__pb2.MakeTimeEstimationResponse.SerializeToString,
            ),
            'DoGeocoding': grpc.unary_unary_rpc_method_handler(
                    servicer.DoGeocoding,
                    request_deserializer=base__pb2.DoGeocodingRequest.FromString,
                    response_serializer=base__pb2.DoGeocodingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ridesharing.MappingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MappingService(object):
    """--- Mapping service ---

    """

    @staticmethod
    def CalculateDistance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ridesharing.MappingService/CalculateDistance',
            base__pb2.CalculateDistanceRequest.SerializeToString,
            base__pb2.CalculateDistanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MakeTimeEstimation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ridesharing.MappingService/MakeTimeEstimation',
            base__pb2.MakeTimeEstimationRequest.SerializeToString,
            base__pb2.MakeTimeEstimationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoGeocoding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ridesharing.MappingService/DoGeocoding',
            base__pb2.DoGeocodingRequest.SerializeToString,
            base__pb2.DoGeocodingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PricingServiceStub(object):
    """--- Pricing service ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateCost = channel.unary_unary(
                '/ridesharing.PricingService/CalculateCost',
                request_serializer=base__pb2.CalculateCostRequest.SerializeToString,
                response_deserializer=base__pb2.CalculateCostResponse.FromString,
                )


class PricingServiceServicer(object):
    """--- Pricing service ---
    """

    def CalculateCost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PricingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateCost': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateCost,
                    request_deserializer=base__pb2.CalculateCostRequest.FromString,
                    response_serializer=base__pb2.CalculateCostResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ridesharing.PricingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PricingService(object):
    """--- Pricing service ---
    """

    @staticmethod
    def CalculateCost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ridesharing.PricingService/CalculateCost',
            base__pb2.CalculateCostRequest.SerializeToString,
            base__pb2.CalculateCostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
