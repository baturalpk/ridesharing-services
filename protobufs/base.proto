//

syntax = "proto3";

package ridesharing;


// --- Common ---

message Empty { }

message Location {
    float latitude = 1;
    float longitude = 2;
}

enum RideType {
    DEFAULT = 0;
    COMFORT = 1;
    PREMIUM = 2;
}


// --- Trip service ---

service TripService {
    rpc RequestTrip (RequestTripRequest) returns (RequestTripResponse);
    rpc CancelTrip (CancelTripRequest) returns (Empty);

    rpc SeekForTripAsDriver (stream SeekForTripAsDriverRequest) returns (stream SeekForTripAsDriverResponse);
}

message RequestTripRequest {
    string rider_id = 1;
    Location start = 2;
    Location destination = 3;
    RideType ride_type = 4;
}

message RequestTripResponse {
    string trip_id = 1;
}

message CancelTripRequest {
    string trip_id = 1;
}

message SeekForTripAsDriverRequest {
    Location driver_location = 1;
}

message SeekForTripAsDriverResponse {
    string trip_id = 1;
    string rider_id = 2;
    Location start = 3;
    Location destination = 4;
}

   
// --- Mapping service ---

service MappingService {
    rpc CalculateDistance (CalculateDistanceRequest) returns (CalculateDistanceResponse);
    rpc MakeTimeEstimation (MakeTimeEstimationRequest) returns (MakeTimeEstimationResponse);
}

message Route {
    Location start = 1;
    Location destination = 2;
}

message CalculateDistanceRequest {
    Route route = 1;
}

message CalculateDistanceResponse {
    float distance = 1;
}

message MakeTimeEstimationRequest {
    Route route = 1;
}

message MakeTimeEstimationResponse {
    float eta = 1;
}


// --- Pricing service ---
service PricingService {
    rpc CalculateCost (CalculateCostRequest) returns (CalculateCostResponse);
}

message CalculateCostRequest {
    RideType type = 1;
    float distance = 2;
}

message CalculateCostResponse {
    float cost = 1;
}
