// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: base.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TripServiceClient is the client API for TripService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TripServiceClient interface {
	RequestTrip(ctx context.Context, in *RequestTripRequest, opts ...grpc.CallOption) (*RequestTripResponse, error)
	CancelTrip(ctx context.Context, in *CancelTripRequest, opts ...grpc.CallOption) (*Empty, error)
	SeekForTripAsDriver(ctx context.Context, opts ...grpc.CallOption) (TripService_SeekForTripAsDriverClient, error)
}

type tripServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTripServiceClient(cc grpc.ClientConnInterface) TripServiceClient {
	return &tripServiceClient{cc}
}

func (c *tripServiceClient) RequestTrip(ctx context.Context, in *RequestTripRequest, opts ...grpc.CallOption) (*RequestTripResponse, error) {
	out := new(RequestTripResponse)
	err := c.cc.Invoke(ctx, "/ridesharing.TripService/RequestTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) CancelTrip(ctx context.Context, in *CancelTripRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ridesharing.TripService/CancelTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) SeekForTripAsDriver(ctx context.Context, opts ...grpc.CallOption) (TripService_SeekForTripAsDriverClient, error) {
	stream, err := c.cc.NewStream(ctx, &TripService_ServiceDesc.Streams[0], "/ridesharing.TripService/SeekForTripAsDriver", opts...)
	if err != nil {
		return nil, err
	}
	x := &tripServiceSeekForTripAsDriverClient{stream}
	return x, nil
}

type TripService_SeekForTripAsDriverClient interface {
	Send(*SeekForTripAsDriverRequest) error
	Recv() (*SeekForTripAsDriverResponse, error)
	grpc.ClientStream
}

type tripServiceSeekForTripAsDriverClient struct {
	grpc.ClientStream
}

func (x *tripServiceSeekForTripAsDriverClient) Send(m *SeekForTripAsDriverRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tripServiceSeekForTripAsDriverClient) Recv() (*SeekForTripAsDriverResponse, error) {
	m := new(SeekForTripAsDriverResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TripServiceServer is the server API for TripService service.
// All implementations must embed UnimplementedTripServiceServer
// for forward compatibility
type TripServiceServer interface {
	RequestTrip(context.Context, *RequestTripRequest) (*RequestTripResponse, error)
	CancelTrip(context.Context, *CancelTripRequest) (*Empty, error)
	SeekForTripAsDriver(TripService_SeekForTripAsDriverServer) error
	mustEmbedUnimplementedTripServiceServer()
}

// UnimplementedTripServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTripServiceServer struct {
}

func (UnimplementedTripServiceServer) RequestTrip(context.Context, *RequestTripRequest) (*RequestTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTrip not implemented")
}
func (UnimplementedTripServiceServer) CancelTrip(context.Context, *CancelTripRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTrip not implemented")
}
func (UnimplementedTripServiceServer) SeekForTripAsDriver(TripService_SeekForTripAsDriverServer) error {
	return status.Errorf(codes.Unimplemented, "method SeekForTripAsDriver not implemented")
}
func (UnimplementedTripServiceServer) mustEmbedUnimplementedTripServiceServer() {}

// UnsafeTripServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TripServiceServer will
// result in compilation errors.
type UnsafeTripServiceServer interface {
	mustEmbedUnimplementedTripServiceServer()
}

func RegisterTripServiceServer(s grpc.ServiceRegistrar, srv TripServiceServer) {
	s.RegisterService(&TripService_ServiceDesc, srv)
}

func _TripService_RequestTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).RequestTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridesharing.TripService/RequestTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).RequestTrip(ctx, req.(*RequestTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_CancelTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CancelTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridesharing.TripService/CancelTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CancelTrip(ctx, req.(*CancelTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_SeekForTripAsDriver_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TripServiceServer).SeekForTripAsDriver(&tripServiceSeekForTripAsDriverServer{stream})
}

type TripService_SeekForTripAsDriverServer interface {
	Send(*SeekForTripAsDriverResponse) error
	Recv() (*SeekForTripAsDriverRequest, error)
	grpc.ServerStream
}

type tripServiceSeekForTripAsDriverServer struct {
	grpc.ServerStream
}

func (x *tripServiceSeekForTripAsDriverServer) Send(m *SeekForTripAsDriverResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tripServiceSeekForTripAsDriverServer) Recv() (*SeekForTripAsDriverRequest, error) {
	m := new(SeekForTripAsDriverRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TripService_ServiceDesc is the grpc.ServiceDesc for TripService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TripService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ridesharing.TripService",
	HandlerType: (*TripServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestTrip",
			Handler:    _TripService_RequestTrip_Handler,
		},
		{
			MethodName: "CancelTrip",
			Handler:    _TripService_CancelTrip_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SeekForTripAsDriver",
			Handler:       _TripService_SeekForTripAsDriver_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "base.proto",
}

// MappingServiceClient is the client API for MappingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MappingServiceClient interface {
	CalculateDistance(ctx context.Context, in *CalculateDistanceRequest, opts ...grpc.CallOption) (*CalculateDistanceResponse, error)
	MakeTimeEstimation(ctx context.Context, in *MakeTimeEstimationRequest, opts ...grpc.CallOption) (*MakeTimeEstimationResponse, error)
	DoGeocoding(ctx context.Context, in *DoGeocodingRequest, opts ...grpc.CallOption) (*DoGeocodingResponse, error)
}

type mappingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMappingServiceClient(cc grpc.ClientConnInterface) MappingServiceClient {
	return &mappingServiceClient{cc}
}

func (c *mappingServiceClient) CalculateDistance(ctx context.Context, in *CalculateDistanceRequest, opts ...grpc.CallOption) (*CalculateDistanceResponse, error) {
	out := new(CalculateDistanceResponse)
	err := c.cc.Invoke(ctx, "/ridesharing.MappingService/CalculateDistance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingServiceClient) MakeTimeEstimation(ctx context.Context, in *MakeTimeEstimationRequest, opts ...grpc.CallOption) (*MakeTimeEstimationResponse, error) {
	out := new(MakeTimeEstimationResponse)
	err := c.cc.Invoke(ctx, "/ridesharing.MappingService/MakeTimeEstimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingServiceClient) DoGeocoding(ctx context.Context, in *DoGeocodingRequest, opts ...grpc.CallOption) (*DoGeocodingResponse, error) {
	out := new(DoGeocodingResponse)
	err := c.cc.Invoke(ctx, "/ridesharing.MappingService/DoGeocoding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MappingServiceServer is the server API for MappingService service.
// All implementations must embed UnimplementedMappingServiceServer
// for forward compatibility
type MappingServiceServer interface {
	CalculateDistance(context.Context, *CalculateDistanceRequest) (*CalculateDistanceResponse, error)
	MakeTimeEstimation(context.Context, *MakeTimeEstimationRequest) (*MakeTimeEstimationResponse, error)
	DoGeocoding(context.Context, *DoGeocodingRequest) (*DoGeocodingResponse, error)
	mustEmbedUnimplementedMappingServiceServer()
}

// UnimplementedMappingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMappingServiceServer struct {
}

func (UnimplementedMappingServiceServer) CalculateDistance(context.Context, *CalculateDistanceRequest) (*CalculateDistanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDistance not implemented")
}
func (UnimplementedMappingServiceServer) MakeTimeEstimation(context.Context, *MakeTimeEstimationRequest) (*MakeTimeEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeTimeEstimation not implemented")
}
func (UnimplementedMappingServiceServer) DoGeocoding(context.Context, *DoGeocodingRequest) (*DoGeocodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoGeocoding not implemented")
}
func (UnimplementedMappingServiceServer) mustEmbedUnimplementedMappingServiceServer() {}

// UnsafeMappingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MappingServiceServer will
// result in compilation errors.
type UnsafeMappingServiceServer interface {
	mustEmbedUnimplementedMappingServiceServer()
}

func RegisterMappingServiceServer(s grpc.ServiceRegistrar, srv MappingServiceServer) {
	s.RegisterService(&MappingService_ServiceDesc, srv)
}

func _MappingService_CalculateDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateDistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).CalculateDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridesharing.MappingService/CalculateDistance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).CalculateDistance(ctx, req.(*CalculateDistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingService_MakeTimeEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTimeEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).MakeTimeEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridesharing.MappingService/MakeTimeEstimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).MakeTimeEstimation(ctx, req.(*MakeTimeEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingService_DoGeocoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoGeocodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).DoGeocoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridesharing.MappingService/DoGeocoding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).DoGeocoding(ctx, req.(*DoGeocodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MappingService_ServiceDesc is the grpc.ServiceDesc for MappingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MappingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ridesharing.MappingService",
	HandlerType: (*MappingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateDistance",
			Handler:    _MappingService_CalculateDistance_Handler,
		},
		{
			MethodName: "MakeTimeEstimation",
			Handler:    _MappingService_MakeTimeEstimation_Handler,
		},
		{
			MethodName: "DoGeocoding",
			Handler:    _MappingService_DoGeocoding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base.proto",
}

// PricingServiceClient is the client API for PricingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PricingServiceClient interface {
	CalculateCost(ctx context.Context, in *CalculateCostRequest, opts ...grpc.CallOption) (*CalculateCostResponse, error)
}

type pricingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPricingServiceClient(cc grpc.ClientConnInterface) PricingServiceClient {
	return &pricingServiceClient{cc}
}

func (c *pricingServiceClient) CalculateCost(ctx context.Context, in *CalculateCostRequest, opts ...grpc.CallOption) (*CalculateCostResponse, error) {
	out := new(CalculateCostResponse)
	err := c.cc.Invoke(ctx, "/ridesharing.PricingService/CalculateCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PricingServiceServer is the server API for PricingService service.
// All implementations must embed UnimplementedPricingServiceServer
// for forward compatibility
type PricingServiceServer interface {
	CalculateCost(context.Context, *CalculateCostRequest) (*CalculateCostResponse, error)
	mustEmbedUnimplementedPricingServiceServer()
}

// UnimplementedPricingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPricingServiceServer struct {
}

func (UnimplementedPricingServiceServer) CalculateCost(context.Context, *CalculateCostRequest) (*CalculateCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCost not implemented")
}
func (UnimplementedPricingServiceServer) mustEmbedUnimplementedPricingServiceServer() {}

// UnsafePricingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricingServiceServer will
// result in compilation errors.
type UnsafePricingServiceServer interface {
	mustEmbedUnimplementedPricingServiceServer()
}

func RegisterPricingServiceServer(s grpc.ServiceRegistrar, srv PricingServiceServer) {
	s.RegisterService(&PricingService_ServiceDesc, srv)
}

func _PricingService_CalculateCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).CalculateCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridesharing.PricingService/CalculateCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).CalculateCost(ctx, req.(*CalculateCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PricingService_ServiceDesc is the grpc.ServiceDesc for PricingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PricingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ridesharing.PricingService",
	HandlerType: (*PricingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateCost",
			Handler:    _PricingService_CalculateCost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base.proto",
}
